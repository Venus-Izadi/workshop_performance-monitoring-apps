schemaVersion: 2.1.0
metadata:
  name: workshop-performance-monitoring-apps
projects:
  - name: workshop-performance-monitoring-apps
    git:
      remotes:
        origin: "https://github.com/redhat-na-ssa/workshop_performance-monitoring-apps.git"
      checkoutFrom:
        revision: main
components:
### PODs
  - name: postgres
    kubernetes:
      # uri: ./infrastructure/postgres-deployment.yaml
      inlined: |
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: "jbo-test"
        spec:
          template:
            metadata:
              name: job-test
            spec:
              restartPolicy: Never
              containers:
              - name: post-install-job
                image: "registry.access.redhat.com/ubi8/ubi-minimal:latest"
                command: 
                - /bin/sh
                - -c 
                - |
                  echo "WELCOME TO test"
                  echo "-------------------------------------------------"
                  echo "Here we could now do initialization work."
                  echo "Like filling our DB with some data or what's so ever"
                  echo "..."

                  sleep 10
### Workspace Tools Container
  - name: tools
    container:
      image: registry.redhat.io/devspaces/udi-rhel8:latest
      env:
        - name: QUARKUS_HTTP_HOST
          value: 0.0.0.0
      endpoints:
        - exposure: none
          name: debug
          protocol: tcp
          targetPort: 5005
        - exposure: public
          name: home
          protocol: http
          targetPort: 8080
          path: /
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      memoryLimit: 6Gi
      memoryRequest: 4Gi
      cpuRequest: 1000m
      cpuLimit: 2000m
      mountSources: true
# Utility Containers
  - name: ubi-minimal
    container:
      args:
        - '-f'
        - /dev/null
      command:
        - tail
      image: registry.access.redhat.com/ubi8/ubi-minimal
      memoryLimit: 64M
      mountSources: true
      sourceMapping: /projects
### volumes
  - name: m2
    volume:
      size: 1G
commands:
### Quarkus inner-loop commands
  - id: quarkus-package-jvm
    exec:
      label: Quarkus - package
      commandLine: './mvnw clean package -Dquarkus.container-image.build=false -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-package-native
    exec:
      label: Package Native
      commandLine: './mvnw package -Dnative -Dmaven.test.skip -Dquarkus.native.native-image-xmx=6G'
      component: tools
      group:
        kind: build
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-start-dev
    exec:
      label: Quarkus - Start Development mode (Hot reload + debug)
      commandLine: './mvnw compile quarkus:dev -Dquarkus.container-image.build=false -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-start-native
    exec:
      label: Quarkus - Start Native
      commandLine: ./quarkus-app-1.0.0-SNAPSHOT-runner
      component: ubi-minimal
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/target'
  - id: quarkus-deploy-on-openshift
    exec:
      label: Build and Deploy on Openshift
      commandLine: 'oc project ${DEVWORKSPACE_NAMESPACE}; ./mvnw clean package -DskipTests -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
### Micronaut inner-loop commands
  - id: mn-package-jvm
    exec:
      label: Micronaut - package
      commandLine: './mvnw clean package -DskipTests'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
  - id: mn-start-dev
    exec:
      label: Micronaut - Start Development mode
      commandLine: './mvnw compile mn:run'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
  - id: mn-deploy-on-openshift
    exec:
      label: Build and Deploy on Openshift
      commandLine: 'oc project ${DEVWORKSPACE_NAMESPACE}; ./mvnw clean package -DskipTests -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
### SpringBoot inner-loop commands
  - id: sb-package-jvm
    exec:
      label: SpringBoot - package
      commandLine: './mvnw clean package -DskipTests'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
  - id: sb-start-dev
    exec:
      label: SpringBoot - Start Development mode
      commandLine: './mvnw compile springboot:run'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
  - id: sb-deploy-on-openshift
    exec:
      label: Build and Deploy on Openshift
      commandLine: 'oc project ${DEVWORKSPACE_NAMESPACE}; ./mvnw clean package -DskipTests -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
### Common commands
  - id: deploy-postgresql
    exec:
      label: Deploy a PostgreSQL instance
      commandLine: '.vscode/deploy_pg_using_operator.sh'
      component: tools
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}'