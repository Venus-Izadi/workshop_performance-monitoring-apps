schemaVersion: 2.2.0
metadata:
  name: workshop-performance-monitoring-apps
projects:
  - name: workshop-performance-monitoring-apps
    git:
      remotes:
        origin: "https://github.com/redhat-na-ssa/workshop_performance-monitoring-apps.git"
      checkoutFrom:
        revision: main
components:
### PODs
  - name: innerloop-postgres-deploy
    openshift:
      # uri: ./infrastructure/postgres-deployment.yaml # not working on DevSpaces 3.5.0!!!
      deployByDefault: false
      endpoints:
        - exposure: public
          name: postgres
          protocol: tcp
          targetPort: 5432
      inlined: |
        apiVersion: v1
        kind: List
        items:
          - kind: DeploymentConfig
            apiVersion: apps.openshift.io/v1
            metadata:
            name: postgresql
            labels:
              template: postgresql-ephemeral-template
            spec:
              strategy:
                type: Recreate
                recreateParams:
                  timeoutSeconds: 600
                resources: {}
                activeDeadlineSeconds: 21600
              triggers:
                - type: ImageChange
                  imageChangeParams:
                    automatic: true
                    containerNames:
                      - postgresql
                    from:
                      kind: ImageStreamTag
                      namespace: openshift
                      name: 'postgresql:latest'
                - type: ConfigChange
              replicas: 1
              revisionHistoryLimit: 10
              test: false
              selector:
                name: postgresql
              template:
                metadata:
                  creationTimestamp: null
                  labels:
                    name: postgresql
                spec:
                  volumes:
                    - name: postgresql-data
                      emptyDir: {}
                  containers:
                    - resources:
                        limits:
                          memory: 512Mi
                      readinessProbe:
                        exec:
                          command:
                            - /usr/libexec/check-container
                        initialDelaySeconds: 5
                        timeoutSeconds: 1
                        periodSeconds: 10
                        successThreshold: 1
                        failureThreshold: 3
                      terminationMessagePath: /dev/termination-log
                      name: postgresql
                      livenessProbe:
                        exec:
                          command:
                            - /usr/libexec/check-container
                            - '--live'
                        initialDelaySeconds: 120
                        timeoutSeconds: 10
                        periodSeconds: 10
                        successThreshold: 1
                        failureThreshold: 3
                      env:
                        - name: POSTGRESQL_USER
                          value: postgres
                        - name: POSTGRESQL_PASSWORD
                          value: password
                        - name: POSTGRESQL_DATABASE
                          value: postgres
                      securityContext:
                        capabilities: {}
                        privileged: false
                      ports:
                        - containerPort: 5432
                          protocol: TCP
                      imagePullPolicy: IfNotPresent
                      volumeMounts:
                        - name: postgresql-data
                          mountPath: /var/lib/pgsql/data
                      terminationMessagePolicy: File
                      image: >-
                        image-registry.openshift-image-registry.svc:5000/openshift/postgresql
                  restartPolicy: Always
                  terminationGracePeriodSeconds: 30
                  dnsPolicy: ClusterFirst
                  securityContext: {}
                  schedulerName: default-scheduler
          - kind: Service
            apiVersion: v1
            metadata:
              name: postgresql
              labels:
                template: postgresql-ephemeral-template
              annotations:
                template.openshift.io/expose-uri: 'postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}'
            spec:
              ports:
                - name: postgresql
                  protocol: TCP
                  port: 5432
                  targetPort: 5432
              internalTrafficPolicy: Cluster
              type: ClusterIP
              ipFamilyPolicy: SingleStack
              sessionAffinity: None
              selector:
                name: postgresql
### Workspace Tools Container
  - name: tools
    container:
      image: registry.redhat.io/devspaces/udi-rhel8:latest
      env:
        - name: QUARKUS_HTTP_HOST
          value: 0.0.0.0
      endpoints:
        - exposure: none
          name: debug
          protocol: tcp
          targetPort: 5005
        - exposure: public
          name: home
          protocol: http
          targetPort: 8080
          path: /
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      memoryLimit: 6Gi
      memoryRequest: 4Gi
      cpuRequest: 1000m
      cpuLimit: 2000m
      mountSources: true
# Utility Containers
  - name: ubi-minimal
    container:
      args:
        - '-f'
        - /dev/null
      command:
        - tail
      image: registry.access.redhat.com/ubi8/ubi-minimal
      memoryLimit: 64M
      mountSources: true
      sourceMapping: /projects
### volumes
  - name: m2
    volume:
      size: 1G
commands:
### Resources Apply commands
  - id: deploy-local-postgres
    apply:
      component: innerloop-postgres-deploy
### Quarkus inner-loop commands
  - id: quarkus-package-jvm
    exec:
      label: Quarkus - package
      commandLine: './mvnw clean package -Dquarkus.container-image.build=false -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-package-native
    exec:
      label: Quarkus - Package Native
      commandLine: './mvnw package -Dnative -Dmaven.test.skip -Dquarkus.native.native-image-xmx=6G'
      component: tools
      group:
        kind: build
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-start-dev
    exec:
      label: Quarkus - Start Development mode (Hot reload + debug)
      commandLine: './mvnw compile quarkus:dev -Dquarkus.container-image.build=false -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-start-native
    exec:
      label: Quarkus - Start Native
      commandLine: ./quarkus-app-1.0.0-SNAPSHOT-runner
      component: ubi-minimal
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/target'
  - id: quarkus-deploy-on-openshift
    exec:
      label: Quarkus - Build and Deploy on Openshift
      commandLine: 'oc project ${DEVWORKSPACE_NAMESPACE}; ./mvnw clean package -DskipTests -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
### Micronaut inner-loop commands
  - id: mn-package-jvm
    exec:
      label: Micronaut - package
      commandLine: './mvnw clean package -DskipTests'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
  - id: mn-start-dev
    exec:
      label: Micronaut - Start Development mode
      commandLine: './mvnw compile mn:run'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
### SpringBoot inner-loop commands
  - id: sb-package-jvm
    exec:
      label: SpringBoot - package
      commandLine: './mvnw clean package -DskipTests'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
  - id: sb-start-dev
    exec:
      label: SpringBoot - Start Development mode
      commandLine: './mvnw compile springboot:run'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
### Common commands
  - id: deploy-postgresql
    exec:
      label: Deploy a PostgreSQL instance
      commandLine: '.vscode/deploy_pg_using_operator.sh'
      component: tools
      group:
        kind: run
      workingDir: '${PROJECT_SOURCE}'