schemaVersion: 2.2.0
metadata:
  name: workshop-performance-monitoring-apps
# projects:
#   - name: workshop-performance-monitoring-apps
    # git:
    #   remotes:
    #     origin: "https://github.com/redhat-na-ssa/workshop_performance-monitoring-apps.git"
    #   checkoutFrom:
    #     revision: main
components:
### kubernetes/openshift resources
  # - name: innerloop-postgres-deploy
  #   openshift:
  #     # uri: ./infrastructure/postgres-deployment.yaml # not working on DevSpaces 3.5.0!!!
  #     deployByDefault: false
  #     endpoints:
  #       - exposure: public
  #         name: postgres
  #         protocol: tcp
  #         targetPort: 5432
  #     inlined: |
### Workspace Tools Container
  - name: tools
    container:
      image: quay.io/redhat_na_ssa/universal-developer-image:ubi8-latest # our fork - 2.0GB compressed
      # image: quay.io/devfile/universal-developer-image@sha256:80fdd1ae37d3b9e0260d9c66b4ff12e35317c31243eabeea5212d98c537a3ba9 # upstream - 3.7GB compressed
      # image: registry.redhat.io/devspaces/udi-rhel8:latest #1.7GB compressed
      env:
        - name: QUARKUS_HTTP_HOST
          value: 0.0.0.0
      endpoints:
        - exposure: public
          name: quarkus-app
          protocol: http
          targetPort: 8701
          path: /quarkus
        - exposure: public
          name: micronaut-app
          protocol: http
          targetPort: 8702
          path: /micronaut
        - exposure: public
          name: springboot-app
          protocol: http
          targetPort: 8703
          path: /springboot
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      memoryLimit: 6Gi
      memoryRequest: 2Gi
      cpuRequest: '1'
      cpuLimit: '3'
      mountSources: true
### volumes
  - name: m2
    volume:
      size: 3G
commands:
### Quarkus inner-loop commands
  - id: quarkus-package-jvm
    exec:
      label: '01: Quarkus - JVM Package'
      commandLine: './mvnw clean package -DskipTests -Dquarkus.container-image.build=false -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-test
    exec:
      label: '02: Quarkus - Test'
      commandLine: './mvnw test'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  # - id: quarkus-package-native
  #   exec:
  #     label: Quarkus - Native Package
  #     commandLine: './mvnw package -Dnative -Dmaven.test.skip -Dquarkus.native.native-image-xmx=6G'
  #     component: tools
  #     group:
  #       kind: build
  #     workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  - id: quarkus-start-dev
    exec:
      label: '03: Quarkus - Start in dev mode (Hot reload + debug)'
      commandLine: './mvnw compile quarkus:dev -DskipTests -Dquarkus.container-image.build=false -Dquarkus.container-image.builder=openshift'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/quarkus-app/'
  # - id: quarkus-start-native
  #   exec:
  #     label: Quarkus - Start in native
  #     commandLine: ./quarkus-app-1.0.0-SNAPSHOT-runner
  #     component: ubi-minimal
  #     group:
  #       kind: run
  #     workingDir: '${PROJECT_SOURCE}/quarkus-app/target'
  # - id: quarkus-deploy-on-openshift
  #   exec:
  #     label: Quarkus - Build and Deploy on Openshift
  #     commandLine: 'oc project ${DEVWORKSPACE_NAMESPACE}; ./mvnw clean package -DskipTests -Dquarkus.kubernetes.deploy=true -Dquarkus.container-image.builder=openshift'
  #     component: tools
  #     group:
  #       kind: run
  #     workingDir: '${PROJECT_SOURCE}/quarkus-app/'
### Micronaut inner-loop commands
  - id: mn-package-jvm
    exec:
      label: '04: Micronaut - JVM Package'
      commandLine: './mvnw clean package -DskipTests'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
  - id: mn-start-dev
    exec:
      label: '05: Micronaut - Start in dev mode'
      commandLine: './mvnw compile -Dmicronaut.environments=dev mn:run'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
  - id: mn-test
    exec:
      label: '06: Micronaut - Test'
      commandLine: './mvnw test'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/micronaut-app/'
### SpringBoot inner-loop commands
  - id: sb-package-jvm
    exec:
      label: '07: SpringBoot - JVM Package'
      commandLine: './mvnw clean package -DskipTests'
      component: tools
      group:
        isDefault: true
        kind: build
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
  - id: sb-start-dev
    exec:
      label: '08: SpringBoot - Start in dev mode'
      commandLine: './mvnw compile spring-boot:run -Dspring.profiles.active=development'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
  - id: sb-test
    exec:
      label: '09: SpringBoot - Test'
      commandLine: './mvnw test'
      component: tools
      group:
        isDefault: true
        kind: run
      workingDir: '${PROJECT_SOURCE}/springboot-app/'
### Common commands
  - id: show-app-routes
    exec:
      label: '10: Show Hyperfoil and Apps Routes'
      component: "tools"
      commandLine: |
        echo
        oc get route hyperfoil-instance --ignore-not-found=true -n "$(oc whoami)-hyperfoil" \
         -o jsonpath="{'\n\nHYPERFOIL_CONTROLLER_URL: '}{'https://'}{.status.ingress[0].host}{'\n'}"
        oc get rt quarkus-app --ignore-not-found=true -n "$(oc whoami)-staging" \
         -o jsonpath="{'\nQUARKUS_APP_URL: '}{.status.address.url}{'\n'}{'APP_CONTEXT_PATH: /quarkus \n\n'}"
        oc get rt micronaut-app --ignore-not-found=true -n "$(oc whoami)-staging" \
         -o jsonpath="{'\nMICRONAUT_APP_URL: '}{.status.address.url}{'\n'}{'APP_CONTEXT_PATH: /micronaut \n\n'}"
        oc get rt springboot-app --ignore-not-found=true -n "$(oc whoami)-staging" \
         -o jsonpath="{'\nSPRINGBOOT_APP_URL: '}{.status.address.url}{'\n'}{'APP_CONTEXT_PATH: /springboot \n\n'}"

  - id: enable-cpu-auto-scaling
    exec:
      label: '11: Enable CPU based auto-scaling'
      component: "tools"
      commandLine: |
        echo
        read -e -p "App Name: [quakus-app | micronaut-app | springboot-app ] " app
        kn service update ${app:-quarkus-app} -n "$(oc whoami)-staging" \
         --annotation autoscaling.knative.dev/class=hpa.autoscaling.knative.dev \
         --scale-metric cpu \
         --scale-target=15

  - id: enable-memory-auto-scaling
    exec:
      label: '12: Enable Memory based auto-scaling'
      component: "tools"
      commandLine: |
        echo
        read -e -p "App Name: [quakus-app | micronaut-app | springboot-app ] " app
        kn service update ${app:-quarkus-app} -n "$(oc whoami)-staging" \
         --annotation autoscaling.knative.dev/class=hpa.autoscaling.knative.dev \
         --scale-metric memory \
         --scale-target=300

  - id: create-registry-push-secret
    exec:
      label: '13: Create Registry Push Secret'
      component: "tools"
      commandLine: |
        echo
        read -e -p "Make sure you have your registry token inside the '' ${PROJECT_SOURCE}/infrastructure/cicd/tekton/setup/quay.io-dockercfg-secret.yaml '' file (hit enter to proceed!)" ok
        echo
        echo "current content of your secret file:"
        bat ${PROJECT_SOURCE}/infrastructure/cicd/tekton/setup/quay.io-dockercfg-secret.yaml

        oc apply -f ${PROJECT_SOURCE}/infrastructure/cicd/tekton/setup/quay.io-dockercfg-secret.yaml -n "$(oc whoami)-cicd"
        oc apply -f ${PROJECT_SOURCE}/infrastructure/cicd/tekton/setup/quay.io-dockercfg-secret.yaml -n "$(oc whoami)-staging"
        oc secrets link pipeline quay-push-secret --for=pull,mount -n "$(oc whoami)-cicd"
        oc secrets link default quay-push-secret --for=pull,mount -n "$(oc whoami)-staging"

  - id: open-hyperfoil-web-cli
    exec:
      label: '14: Open Hyperfoil Web CLI'
      component: "tools"
      commandLine: |
        hfurl=$(oc get route hyperfoil-instance --ignore-not-found=true -n "$(oc whoami)-hyperfoil" -o jsonpath="{'https://'}{.status.ingress[0].host}")
        echo "opening $hfurl in your browser..."
        python -m webbrowser "$hfurl"

  - id: oc-login
    exec:
      label: '98: OC Login'
      component: "tools"
      commandLine: |
        echo
        echo "current user: $(oc whoami)"
        echo "current project: $(oc project)"
        echo
        oc login -u $(echo $DEVWORKSPACE_NAMESPACE | cut -d'-' -f 1) $KUBERNETES_PORT --insecure-skip-tls-verify=true
        oc project $DEVWORKSPACE_NAMESPACE

  # - id: deploy-postgresql
  #   exec:
  #     label: Deploy a PostgreSQL instance
  #     commandLine: '${PROJECT_SOURCE}/infrastructure/deploy_pg_using_operator.sh'
  #     component: tools
  #     group:
  #       kind: run
  #     workingDir: '${PROJECT_SOURCE}'
### Pre-hooks
  # - id: switch-to-java-11
  #   exec:
  #     label: Switch to Java 11
  #     component: "tools"
  #     commandLine: |
  #       [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
  #       sdk default java 11.0.15-tem
  - id: switch-to-java-17
    exec:
      label: '99: Switch to Java 17'
      component: "tools"
      # workingDir: '${PROJECT_SOURCE}'
      commandLine: |
        [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
        sdk default java 17.0.7-tem
        #copy maven settings pointing to in-cluster nexus mirror
        [[ -s "$PROJECT_SOURCE/settings.xml" ]] && cp -v $PROJECT_SOURCE/settings.xml $HOME/.m2/
      # use this block when using the product UDI
      # commandLine: |
      #   echo "" >> /home/user/.bashrc
      #   echo "#added during devfile postStart event processing..." >> /home/user/.bashrc
      #   echo "export JAVA_HOME=$JAVA_HOME_17" >> /home/user/.bashrc
      #   echo "export PATH=$JAVA_HOME_17/bin:$PATH" >> /home/user/.bashrc
  # - id: config-git-store
  #   exec:
  #     label: Create git credential store
  #     component: "tools"
  #     commandLine: |
  #       git config --global credential.helper store
  # - id: pre-hooks
  #   composite:
  #     commands:
  #       - switch-to-java-17
  #       - config-git-store
events:
  postStart:
    - switch-to-java-17 # <== Start of the workspace happens after this command is completed