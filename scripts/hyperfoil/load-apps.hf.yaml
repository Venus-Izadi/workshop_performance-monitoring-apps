name: summit-lab-load-apps
http:
- host: !param QUARKUS_APP_URL http://quarkus-app:8080
  name: quarkus-host
  sharedConnections: !param SHARED_CONN 200 #evenly distributed among agents and threads.
- host: !param MICRONAUT_APP_URL http://micronaut-app:8080
  name: micronaut-host
  sharedConnections: !param SHARED_CONN 200
- host: !param SPRINGBOOT_APP_URL http://springboot-app:8080
  name: springboot-host
  sharedConnections: !param SHARED_CONN 200

ergonomics: # Disable stopping the scenario on 4xx or 5xx response
  autoRangeCheck: false
  stopOnInvalid: false

# Distribute the connections among two agents
# COMMENTS OUT IF RUNING LOCALLY ON STANDALONE MODE!
agents:
  agent-01:
    node: kubernetes.io/os=linux
    stop: true
  agent-02:
    node: kubernetes.io/os=linux
    stop: true
  agent-03:
    node: kubernetes.io/os=linux
    stop: true
  # agent-04:
  #   node: node-role.kubernetes.io/control-plane=
  # agent-05:
  #   node: node-role.kubernetes.io/control-plane=

#all phases are started independently at the same moment (when the benchmark was started)
phases:
# This first phase will wake-up the services as they might be scaled to zero (serverless default behavior)
# in JVM mode they may take between 3-8 secs due to the cold start effect
- wakeUp:
    # The benchmark will start certain number of users according to a schedule 
    # regardless of previously started users completing the scenario. 
    # This is the open-model
    atOnce:
      users: 1 # run the scenario exactly once
      duration: 0
      scenario:
      - serviceWakeup: #sequence
        - httpRequest:
            GET: /quarkus
            endpoint: quarkus-host
            sync: false
            sla:
              blockedRatio: 1
        - httpRequest:
            GET: /micronaut
            endpoint: micronaut-host
            sync: false
            sla:
              blockedRatio: 1
        - httpRequest:
            GET: /springboot
            endpoint: springboot-host
            sync: false
            sla:
              blockedRatio: 1
        # This step waits until responses for all sent requests are received and processed.
        - awaitAllResponses

- hello:
    constantRate:
      startAfterStrict: wakeUp # will wait until the wakeUp phase is TERMINATED (all requests done!)
      # 10 users will be starting the scenario every second (during 120s)
      usersPerSec: !param USERS_PER_SEC 10 # run the scenario 'n' times per second in average
      maxSessions: 200
      duration: 180s #let it run for about 3min...
      # In Hyperfoil, everything is pre-allocated = limited in size. Here we'll
      # set that we won't run more than LOOP (1 by default) iterations of this phase.
      # maxIterations: !param LOOP 1
      scenario:
      - sayHello: #sequence
        - httpRequest:
            GET: /quarkus
            endpoint: quarkus-host
            sync: false
        - httpRequest:
            GET: /micronaut
            endpoint: micronaut-host
            sync: false
        - httpRequest:
            GET: /springboot
            endpoint: springboot-host
            sync: false
        # Wait 3 seconds to simulate user-interaction
        - thinkTime:
            duration: 1s

- cpuRampUp:
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: !param USERS_PER_SEC 10
      # We expect at most n users being active at one moment - see below
      maxSessions: 100
      duration: !param PHASE_DURATION_SECS 60s
      #maxIterations: !param LOOP 1
      startAfterStrict: 
      - wakeUp
      scenario:
      - fetchCpu:
        - set:
            var: cpuIterations
            value: !param CPU_ITERATIONS 5
        - httpRequest:
            GET: /quarkus/cpu?iterations=${cpuIterations}
            endpoint: quarkus-host
            sync: false
        - httpRequest:
            GET: /micronaut/cpu?iterations=${cpuIterations}
            endpoint: micronaut-host
            sync: false
        - httpRequest:
            GET: /springboot/cpu?iterations=${cpuIterations}
            endpoint: springboot-host
            sync: false

- cpuWithPersistence:
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: !param USERS_PER_SEC 10
      maxSessions: 100
      duration: !param PHASE_DURATION_SECS 60s
      #maxIterations: !param LOOP 1
      startAfterStrict: 
      - wakeUp
      - cpuRampUp
      scenario:
      - fetchCpu:
        - set:
            var: cpuIterations
            value: !param CPU_ITERATIONS 5
        - httpRequest:
            GET: /quarkus/cpu?iterations=${cpuIterations}&db=true
            endpoint: quarkus-host
            sync: false
        - httpRequest:
            GET: /micronaut/cpu?iterations=${cpuIterations}&db=true
            endpoint: micronaut-host
            sync: false
        - httpRequest:
            GET: /springboot/cpu?iterations=${cpuIterations}&db=true
            endpoint: springboot-host
            sync: false

- memoryRampUp:
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: !param USERS_PER_SEC 10
      maxSessions: 100   
      duration: !param PHASE_DURATION_SECS 60s
      #maxIterations: !param LOOP 1
      startAfterStrict: 
      - wakeUp
      - cpuRampUp
      scenario:
      - allocateMem:
        - set:
            var: memoryBytes
            value: !param MEMORY_BITES 20
        - httpRequest:
            GET: /quarkus/memory?bites=${memoryBytes}
            endpoint: quarkus-host
            sync: false
        - httpRequest:
            GET: /micronaut/memory?bites=${memoryBytes}
            endpoint: micronaut-host
            sync: false
        - httpRequest:
            GET: /springboot/memory?bites=${memoryBytes}
            endpoint: springboot-host
            sync: false

- memoryWithPersistence:
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: !param USERS_PER_SEC 10
      maxSessions: 100
      duration: !param PHASE_DURATION_SECS 60s
      #maxIterations: !param LOOP 1
      startAfterStrict: 
      - wakeUp
      - memoryRampUp
      scenario:
      - allocateMem:
        - set:
            var: memoryBytes
            value: !param MEMORY_BITES 20
        - httpRequest:
            GET: /quarkus/memory?bites=${memoryBytes}&db=true
            endpoint: quarkus-host
            sync: false
        - httpRequest:
            GET: /micronaut/memory?bites=${memoryBytes}&db=true
            endpoint: micronaut-host
            sync: false
        - httpRequest:
            GET: /springboot/memory?bites=${memoryBytes}&db=true
            endpoint: springboot-host
            sync: false