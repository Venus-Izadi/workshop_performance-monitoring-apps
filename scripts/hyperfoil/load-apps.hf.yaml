name: summit-lab-load-apps
http:
# - host: https://quarkus-app-sandbox.apps.cluster-hvsxt.hvsxt.sandbox891.opentlc.com
# - host: http://springboot-app:8080
- host: !param QUARKUS_APP_URL http://quarkus-app:8080
  sharedConnections: !param SHARED_CONN 10 #evenly distributed among agents and threads.
# - host: https://micronaut-app-sandbox.apps.cluster-hvsxt.hvsxt.sandbox891.opentlc.com
# - host: http://springboot-app:8080
- host: !param MICRONAUT_APP_URL http://micronaut-app:8080
  sharedConnections: !param SHARED_CONN 10
# - host: https://springboot-app-sandbox.apps.cluster-hvsxt.hvsxt.sandbox891.opentlc.com
# - host: http://springboot-app:8080
- host: !param SPRINGBOOT_APP_URL http://springboot-app:8080
  sharedConnections: !param SHARED_CONN 10
# Distribute the connections among two agents
# COMMENTS OUT IF RUNING LOCALLY ON STANDALONE MODE!
# agents:
#   agent-01:
#     node: kubernetes.io/os=linux
#   agent-02:
#     node: kubernetes.io/os=linux

#all phases are started independently at the same moment (when the benchmark was started)
phases:
- hello:
    # The benchmark will start certain number of users according to a schedule 
    # regardless of previously started users completing the scenario. 
    # This is the open-model
    constantRate:
      # 10 users will be starting the scenario every second (during 5s)
      usersPerSec: !param USERS_PER_SEC 1 # run the scenario 'n' times per second in average
      duration: !param PHASE_DURATION_SECS 5s
      scenario:
      - fetchHello: #sequence
        - httpRequest:
            GET: /quarkus
            authority: quarkus-app:8080
        - httpRequest:
            GET: /micronaut
            authority: micronaut-app:8080
        - httpRequest:
            GET: /springboot
            authority: springboot-app:8080

- cpuRampUp:
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: !param USERS_PER_SEC 2 # run the scenario 'n' times per second in average
      # We expect at most 200 users being active at one moment - see below
      maxSessions: 200   
      #usersPerSec: !param USERS_PER_SEC 1 # run the scenario 'n' times per second in average
      duration: !param PHASE_DURATION_SECS 5s
      scenario:
      - fetchCpu:
        - set:
            var: cpuIterations
            value: !param CPU_ITERATIONS 10
        - httpRequest:
            GET: /quarkus/cpu?iterations=${cpuIterations}
            authority: quarkus-app:8080
        - httpRequest:
            GET: /micronaut/cpu?iterations=${cpuIterations}
            authority: micronaut-app:8080
        - httpRequest:
            GET: /springboot/cpu?iterations=${cpuIterations}
            authority: springboot-app:8080

- cpuWithPersistence:
    constantRate:
      usersPerSec: !param USERS_PER_SEC 1 # run the scenario 'n' times per second in average
      duration: !param PHASE_DURATION_SECS 5s
      startAfter: cpuRampUp
      scenario:
      - fetchCpu:
        - set:
            var: cpuIterations
            value: !param CPU_ITERATIONS 10
        - httpRequest:
            GET: /quarkus/cpu?iterations=${cpuIterations}&db=true
            authority: quarkus-app:8080
        - httpRequest:
            GET: /micronaut/cpu?iterations=${cpuIterations}&db=true
            authority: micronaut-app:8080
        - httpRequest:
            GET: /springboot/cpu?iterations=${cpuIterations}&db=true
            authority: springboot-app:8080

- memoryRampUp:
    increasingRate:
      initialUsersPerSec: 1
      targetUsersPerSec: !param USERS_PER_SEC 2 # run the scenario 'n' times per second in average
      # We expect at most 200 users being active at one moment - see below
      maxSessions: 200   
      #usersPerSec: !param USERS_PER_SEC 1 # run the scenario 'n' times per second in average
      duration: !param PHASE_DURATION_SECS 5s
      scenario:
      - allocateMem:
        - set:
            var: memoryBytes
            value: !param MEMORY_BITES 10
        - httpRequest:
            GET: /quarkus/memory?bites=${memoryBytes}
            authority: quarkus-app:8080
        - httpRequest:
            GET: /micronaut/memory?bites=${memoryBytes}
            authority: micronaut-app:8080
        - httpRequest:
            GET: /springboot/memory?bites=${memoryBytes}
            authority: springboot-app:8080

- memoryWithPersistence:
    constantRate:
      usersPerSec: !param USERS_PER_SEC 1 # run the scenario 'n' times per second in average
      duration: !param PHASE_DURATION_SECS 5s
      startAfter: memoryRampUp
      scenario:
      - allocateMem:
        - set:
            var: memoryBytes
            value: !param MEMORY_BITES 10
        - httpRequest:
            GET: /quarkus/memory?bites=${memoryBytes}&db=true
            authority: quarkus-app:8080
        - httpRequest:
            GET: /micronaut/memory?bites=${memoryBytes}&db=true
            authority: micronaut-app:8080
        - httpRequest:
            GET: /springboot/memory?bites=${memoryBytes}&db=true
            authority: springboot-app:8080
